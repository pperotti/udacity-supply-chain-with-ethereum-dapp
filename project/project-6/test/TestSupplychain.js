// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 100
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    var supplyChain;

    before('Setup', async() => {
        supplyChain = await SupplyChain.deployed()
        supplyChain.addFarmer(accounts[1])
        supplyChain.addDistributor(accounts[2])
        supplyChain.addRetailer(accounts[3])
        supplyChain.addConsumer(accounts[4])
    })

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Harvested()
        supplyChain.Harvested(function(err, res) {
            eventEmitted = true
        })

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.harvestItem(upc, 
            originFarmerID, 
            originFarmName, 
            originFarmInformation, 
            originFarmLatitude, 
            originFarmLongitude, 
            productNotes, {from: originFarmerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()

        console.log("FARMER ID: " + originFarmerID + " SKU: " + sku + " UPC: " + upc);
        const itemsByFarmer = await supplyChain.getHarvestedItemsByFarmer(originFarmerID);
        console.log("UPC: " + itemsByFarmer[0] + " LENGTH: " + itemsByFarmer.length);
        assert.equal(itemsByFarmer[0], 100, "The value should be 100");
        
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
      
        console.log("SKU: " + resultBufferOne[0]);
        console.log("UPC: " + resultBufferOne[1]);
        console.log("ORIGIN OWNER ID: " + resultBufferOne[2]);
        console.log("ORIGIN FARMER ID: " + resultBufferOne[3]);
        console.log("ORIGIN FARMER NAME: " + resultBufferOne[4]);
        console.log("ORIGIN FARMER INFORMATION: " + resultBufferOne[5]);
        console.log("ORIGIN FARMER LAT: " + resultBufferOne[6]);
        console.log("ORIGIN FARMER LON: " + resultBufferOne[7]);
        //console.log("count: " + count);
        
        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')

    })

    
    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Processed()
        supplyChain.Processed(function(err, res) {
            eventEmitted = true
        })

        // Mark an item as Processed by calling function processtItem()
        await supplyChain.processItem(upc)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        //console.log("ItemState: " + resultBufferTwo[5]);

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid state')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Packed()
        supplyChain.Packed(function(err, res) {
            eventEmitted = true
        })

        // Mark an item as Packed by calling function packItem()
        await supplyChain.packItem(upc)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid state')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        
    })
    
    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event ForSale()
        supplyChain.ForSale(function(err, res) {
            eventEmitted = true
        })

        // Mark an item as ForSale by calling function sellItem()
        await supplyChain.sellItem(upc, 2)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        console.log("Price: " + resultBufferTwo[4]); 
        console.log("ItemState: " + resultBufferTwo[5]);

        const itemsAvailableForSale = await supplyChain.getItemListForSale();
        console.log("# Items for Sale: " + itemsAvailableForSale.length);
        for (i=0;i<itemsAvailableForSale.length;i++) {
            console.log("-> " + itemsAvailableForSale[i]);
        }

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[4], 2, 'Error: Wrong price')
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid state')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })
    
    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {

        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Sold()
        supplyChain.Sold(function(err, res) {
            eventEmitted = true
        })

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.buyItem(upc, {from: distributorID, value: 5}).then(function(transaction){
            return new Promise(function(resolve, reject) {
              return web3.eth.getTransaction(transaction.tx, function(err, tx){
                if(err){
                  reject(err);
                }
                resolve(tx);
              });
            });
          });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        //console.log("New DistributorID: " + resultBufferTwo[6]);
        //console.log("New Console Owner ID: " + resultBufferOne[2]);

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], distributorID, 'Error: Owner should be the distributor.')
        assert.equal(resultBufferTwo[4], 2, 'Error: Wrong price')
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid state')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        
    })
    
    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Shipped()
        supplyChain.Shipped(function(err, res) {
            eventEmitted = true
        })  
        
        // console.log("DistributorID: " + distributorID)
        // console.log("Owner By UPC: " + await supplyChain.getOwnerByUpc(upc))
        // console.log("State By UPC: " + await supplyChain.getStateByUpc(upc))
        // console.log("Is Caller a distributor: " + await supplyChain.verifyCallerForUpc(upc, distributorID))

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.shipItem(upc, {from: distributorID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], distributorID, 'Error: Owner should be the distributor.')
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid state')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
              
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Received()
        supplyChain.Received(function(err, res) {
            eventEmitted = true
        })

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.receiveItem(upc, {from: retailerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], retailerID, 'Error: Owner should be the retailer.')
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid state')
        assert.equal(eventEmitted, true, 'Invalid event emitted')     
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Purchased()
        supplyChain.Purchased(function(err, res) {
            eventEmitted = true
        })

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.purchaseItem(upc, {from: consumerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Owner should be the retailer.')
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid state')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    }) 
    
    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)

        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Invalid CONSUMER ID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        //console.log("result price: " + resultBufferTwo[4]);
        //console.log("product price: " + productPrice);

        // Verify the result set:
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid item productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid item productNotes')
        assert.equal(resultBufferTwo[4], 2, 'Error: Invalid item productPrice')
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item itemState')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid distributorID')
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid retailerID')
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid consumerID')
    })

    // Extra Tests
    it("Get all items harvested by one particular farmer", async() => {
        //console.log("Owner: " + (await supplyChain.getOwner()));
        const itemCount = await supplyChain.getHarvestedItemsCount(originFarmerID);
        //console.log("Item count: " + itemCount);
        //console.log("address: " + originFarmerID);
        const items = await supplyChain.getHarvestedItemsByFarmer(originFarmerID);
        /*console.log("UPC LIST SIZE:" + items.length);
        for (i=0;i<itemCount;i++) {
             console.log("UPC #: " + items[i]);
        }*/
        assert.equal(itemCount, 1, "By now, you should have 1 item in the list");
        assert.equal(itemCount, items.length, "Error: We should have 1 items harvested for this farmer");
        assert.equal(items[0], 100, "UPC value should be 100");
    })

    // Test the contract can retrieve the list of items
    it("Test item list", async() => {
        const itemCount = await supplyChain.getItemCount();
        console.log("item count: " + itemCount);
        const itemList = await supplyChain.getItemList();
        for (i=0;i<itemList.length;i++) {
            console.log("-> " + itemList[i]);
        }
    }) 

});

