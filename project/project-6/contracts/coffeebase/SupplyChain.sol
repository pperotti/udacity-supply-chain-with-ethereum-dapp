pragma solidity ^0.5.16; //0.4.24;

import "../coffeecore/Ownable.sol";
import "../coffeeaccesscontrol/FarmerRole.sol";
import "../coffeeaccesscontrol/DistributorRole.sol";
import "../coffeeaccesscontrol/RetailerRole.sol";
import "../coffeeaccesscontrol/ConsumerRole.sol";

// Define a contract 'Supplychain'
contract SupplyChain is FarmerRole, DistributorRole, RetailerRole, ConsumerRole {

  // Define 'owner'
  address owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  // uint upc = 0; // This property is not needed.

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint sku = 0;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Track the items harvested by farmer
  //mapping (address => uint[]) itemCountHarvestedByFarmer;
  mapping (address => uint[]) itemHarvestedByFarmer;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Harvested,  // 0
    Processed,  // 1
    Packed,     // 2
    ForSale,    // 3
    Sold,       // 4
    Shipped,    // 5
    Received,   // 6
    Purchased   // 7
  }

  State constant defaultState = State.Harvested;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originFarmerID; // Metamask-Ethereum address of the Farmer
    string  originFarmName; // Farmer Name
    string  originFarmInformation; // Farmer Information
    string  originFarmLatitude; // Farm Latitude
    string  originFarmLongitude; // Farm Longitude
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address distributorID;  // Metamask-Ethereum address of the Distributor
    address retailerID; // Metamask-Ethereum address of the Retailer
    address payable consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Harvested(uint upc);
  event Processed(uint upc);
  event Packed(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Purchased(uint upc);

  event FarmerResult(bool value);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  //TODO; Commented out to avoid conflits with Ownable
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  // Define a modifier that verifies the owner of the item is the address specified in the second argument. 
  modifier verifyRightCaller(uint _upc, address _address) {
    require (items[_upc].ownerID == _address);
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].consumerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Harvested
  modifier harvested(uint _upc) {
    require(items[_upc].itemState == State.Harvested);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Processed
  modifier processed(uint _upc) {
    require(items[_upc].itemState == State.Processed);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Packed
  modifier packed(uint _upc) {
    require(items[_upc].itemState == State.Packed);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSale
  modifier forSale(uint _upc) {
    require(items[_upc].itemState == State.ForSale);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Sold
  modifier sold(uint _upc) {
    require(items[_upc].itemState == State.Sold);  
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Shipped
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Purchased
  modifier purchased(uint _upc) {
    require(items[_upc].itemState == State.Purchased);
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  constructor() public payable {  
    owner = msg.sender;
    sku = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner) {
      selfdestruct(msg.sender);
    }
  }

  // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
  function harvestItem(uint _upc, 
    address _originFarmerID, 
    string memory _originFarmName, 
    string memory _originFarmInformation, 
    string memory _originFarmLatitude, 
    string memory _originFarmLongitude, 
    string memory _productNotes) public 

    //Only registered farmers can harvest items.
    onlyFarmer()
  {
    
    // Add the new item as part of Harvest
    //items[sku] = Item(sku,
    items[_upc] = Item(sku,
      _upc,
      _originFarmerID, //The first owner is the FARMER.
      _originFarmerID,
      _originFarmName,
      _originFarmInformation,
      _originFarmLatitude,
      _originFarmLongitude,
      sku + _upc,
      _productNotes,
      0,
      defaultState,
      address(0x0),
      address(0x0),
      address(0x0)
    );
    
    // Track the items harvested by this farmer
    itemHarvestedByFarmer[_originFarmerID].push(_upc);

    // Increment sku
    sku = sku + 1;

    // Emit the appropriate event
    emit Harvested(_upc);
  }

  // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'
  //function processItem(uint _upc) harvested(_upc) verifyCaller(items[_upc].originFarmerID) public 
  function processItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    harvested(_upc) 

    // Call modifier to verify caller of this function
    //verifyRightCaller(_upc, items[_upc].originFarmerID) 
    onlyFarmer()
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Processed;
    
    // Emit the appropriate event
    emit Processed(_upc);
  }

  // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
  function packItem(uint _upc) processed(_upc) public 
  // Call modifier to check if upc has passed previous supply chain stage
  processed(_upc)

  // Call modifier to verify caller of this function
  onlyFarmer()
  //verifyRightCaller(_upc, items[_upc].originFarmerID)
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Packed;
    
    // Emit the appropriate event
    emit Packed(_upc);
  }

  // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
  function sellItem(uint _upc, uint _price) public 
  // Call modifier to check if upc has passed previous supply chain stage
  packed(_upc)

  // Call modifier to verify caller of this function
  onlyFarmer()
  //verifyRightCaller(_upc, items[_upc].originFarmerID)
  {
    // Update the appropriate fields
    items[_upc].itemState = State.ForSale;
    items[_upc].productPrice = _price;

    // Emit the appropriate event
    emit ForSale(_upc);
  }

  // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyItem(uint _upc) public payable 
    // Call modifier to check if upc has passed previous supply chain stage
    forSale(_upc)
    
    // Call modifer to check if buyer has paid enough
    paidEnough(items[_upc].productPrice)

    // Call modifer to send any excess ether back to buyer (cannot be done in the signature)
    checkValue(_upc)

    //Make sure a distributor can only call this
    onlyDistributor()
  { 
    // Update the appropriate fields - ownerID, distributorID, itemState
    address buyerAddress = msg.sender;
    items[_upc].ownerID = buyerAddress;
    items[_upc].distributorID = buyerAddress;
    items[_upc].itemState = State.Sold;

    // emit the appropriate event
    emit Sold(_upc);
  }

  // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
  // Use the above modifers to check if the item is sold
  function shipItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    sold(_upc)

    // Call modifier to verify caller of this function 
    //verifyRightCaller(_upc, items[_upc].distributorID)
    onlyDistributor()
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Shipped;

    // Emit the appropriate event
    emit Shipped(_upc);
  }

  // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped
  function receiveItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    shipped(_upc)

    // Access Control List enforced by calling Smart Contract / DApp
    //verifyRightCaller(_upc, items[_upc].retailer)
    onlyRetailer()
  {
    // Update the appropriate fields - ownerID, retailerID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].retailerID = msg.sender;
    items[_upc].itemState = State.Received;

    // Emit the appropriate event
    emit Received(_upc);
  }

  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
  function purchaseItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    received(_upc)

    // Access Control List enforced by calling Smart Contract / DApp
    //verifyRightCaller(_upc, items[_upc].retailerID)
    onlyConsumer()
  {
    // Update the appropriate fields - ownerID, consumerID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].consumerID = msg.sender;
    items[_upc].itemState = State.Purchased;

    // Emit the appropriate event
    emit Purchased(_upc);
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns 
    (
    uint    itemSKU,
    uint    itemUPC,
    address ownerID,
    address originFarmerID,
    string memory originFarmName,
    string memory originFarmInformation,
    string memory originFarmLat,
    string memory originFarmLong
    )
  {
    Item memory item = items[_upc];
    return 
    (
      item.sku,
      item.upc,
      item.ownerID,
      item.originFarmerID,
      item.originFarmName,
      item.originFarmInformation,
      item.originFarmLatitude,
      item.originFarmLongitude
    );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns 
    (
    uint    itemSKU,
    uint    itemUPC,
    uint    productID,
    string memory productNotes,
    uint    productPrice,
    uint    itemState,
    address distributorID,
    address retailerID,
    address payable consumerID
    ) 
  {
    Item memory item = items[_upc];
    return 
    (
      item.sku,
      item.upc,
      item.productID,
      item.productNotes,
      item.productPrice,
      uint(item.itemState),
      item.distributorID,
      item.retailerID,
      item.consumerID
    );
  }

  function verifyCallerFc(address _address) public view returns (bool) {
    if (msg.sender == _address) {
      return true;
    } else {
      return false;
    }
  }

  function getSender() public view returns (address) {
    return msg.sender;
  }

  function isItemForSale(uint _upc) public view returns (bool) {
    return (items[_upc].itemState == State.ForSale);
  }

  function verifyCallerForUpc(uint _upc, address _address) public view returns (bool) {
    return (items[_upc].ownerID == _address);
  }

  function getOwnerByUpc(uint _upc) public view returns (address) {
    return items[_upc].ownerID;
  }

  function getStateByUpc(uint _upc) public view returns (uint) {
    return uint(items[_upc].itemState);
  }

  function requireRegistration(address _address) public view returns (bool) {
    if (isFarmer(_address)) {
      return false;
    } else if (isDistributor(_address)) {
      return false;
    } else if (isRetailer(_address)) {
      return false;
    } else if (isConsumer(_address)) {
      return false;
    } else {
      return true;
    }
  }

  function getHarvestedItemsCount(address _address) public view returns (uint) {
    return itemHarvestedByFarmer[_address].length;
  }

  function getHarvestedItemsByFarmer(address _address) public view returns (uint[] memory) {
    uint[] memory copiedIndexes = new uint[](itemHarvestedByFarmer[_address].length);
    for (uint i = 0; i < itemHarvestedByFarmer[_address].length; i++ ) {
      copiedIndexes[i] = itemHarvestedByFarmer[_address][i];
    }

    return copiedIndexes;
  }

  function getNextSku() public view returns (uint) {
    return sku;
  }

  function getOwner() public view returns (address) {
    return owner;
  }

}
